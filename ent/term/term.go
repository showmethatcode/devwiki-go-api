// Code generated by ent, DO NOT EDIT.

package term

import (
	"time"
)

const (
	// Label holds the string label denoting the term type in the database.
	Label = "term"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRevisions holds the string denoting the revisions edge name in mutations.
	EdgeRevisions = "revisions"
	// EdgePointers holds the string denoting the pointers edge name in mutations.
	EdgePointers = "pointers"
	// EdgeSubjectID holds the string denoting the subject_id edge name in mutations.
	EdgeSubjectID = "subject_id"
	// EdgeRelatedID holds the string denoting the related_id edge name in mutations.
	EdgeRelatedID = "related_id"
	// Table holds the table name of the term in the database.
	Table = "terms"
	// RevisionsTable is the table that holds the revisions relation/edge.
	RevisionsTable = "term_revisions"
	// RevisionsInverseTable is the table name for the TermRevision entity.
	// It exists in this package in order to avoid circular dependency with the "termrevision" package.
	RevisionsInverseTable = "term_revisions"
	// RevisionsColumn is the table column denoting the revisions relation/edge.
	RevisionsColumn = "term_id"
	// PointersTable is the table that holds the pointers relation/edge.
	PointersTable = "term_pointers"
	// PointersInverseTable is the table name for the TermPointer entity.
	// It exists in this package in order to avoid circular dependency with the "termpointer" package.
	PointersInverseTable = "term_pointers"
	// PointersColumn is the table column denoting the pointers relation/edge.
	PointersColumn = "term_id"
	// SubjectIDTable is the table that holds the subject_id relation/edge.
	SubjectIDTable = "term_relateds"
	// SubjectIDInverseTable is the table name for the TermRelated entity.
	// It exists in this package in order to avoid circular dependency with the "termrelated" package.
	SubjectIDInverseTable = "term_relateds"
	// SubjectIDColumn is the table column denoting the subject_id relation/edge.
	SubjectIDColumn = "term_subject_id"
	// RelatedIDTable is the table that holds the related_id relation/edge.
	RelatedIDTable = "term_relateds"
	// RelatedIDInverseTable is the table name for the TermRelated entity.
	// It exists in this package in order to avoid circular dependency with the "termrelated" package.
	RelatedIDInverseTable = "term_relateds"
	// RelatedIDColumn is the table column denoting the related_id relation/edge.
	RelatedIDColumn = "term_related_id"
)

// Columns holds all SQL columns for term fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
