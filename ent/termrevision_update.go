// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"devwiki/ent/predicate"
	"devwiki/ent/term"
	"devwiki/ent/termpointer"
	"devwiki/ent/termrevision"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TermRevisionUpdate is the builder for updating TermRevision entities.
type TermRevisionUpdate struct {
	config
	hooks    []Hook
	mutation *TermRevisionMutation
}

// Where appends a list predicates to the TermRevisionUpdate builder.
func (tru *TermRevisionUpdate) Where(ps ...predicate.TermRevision) *TermRevisionUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetDescription sets the "description" field.
func (tru *TermRevisionUpdate) SetDescription(s string) *TermRevisionUpdate {
	tru.mutation.SetDescription(s)
	return tru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tru *TermRevisionUpdate) SetNillableDescription(s *string) *TermRevisionUpdate {
	if s != nil {
		tru.SetDescription(*s)
	}
	return tru
}

// ClearDescription clears the value of the "description" field.
func (tru *TermRevisionUpdate) ClearDescription() *TermRevisionUpdate {
	tru.mutation.ClearDescription()
	return tru
}

// SetTermID sets the "term_id" field.
func (tru *TermRevisionUpdate) SetTermID(i int) *TermRevisionUpdate {
	tru.mutation.SetTermID(i)
	return tru
}

// SetNillableTermID sets the "term_id" field if the given value is not nil.
func (tru *TermRevisionUpdate) SetNillableTermID(i *int) *TermRevisionUpdate {
	if i != nil {
		tru.SetTermID(*i)
	}
	return tru
}

// ClearTermID clears the value of the "term_id" field.
func (tru *TermRevisionUpdate) ClearTermID() *TermRevisionUpdate {
	tru.mutation.ClearTermID()
	return tru
}

// SetUpdatedAt sets the "updated_at" field.
func (tru *TermRevisionUpdate) SetUpdatedAt(t time.Time) *TermRevisionUpdate {
	tru.mutation.SetUpdatedAt(t)
	return tru
}

// AddPointerIDs adds the "pointers" edge to the TermPointer entity by IDs.
func (tru *TermRevisionUpdate) AddPointerIDs(ids ...int) *TermRevisionUpdate {
	tru.mutation.AddPointerIDs(ids...)
	return tru
}

// AddPointers adds the "pointers" edges to the TermPointer entity.
func (tru *TermRevisionUpdate) AddPointers(t ...*TermPointer) *TermRevisionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.AddPointerIDs(ids...)
}

// SetTerm sets the "term" edge to the Term entity.
func (tru *TermRevisionUpdate) SetTerm(t *Term) *TermRevisionUpdate {
	return tru.SetTermID(t.ID)
}

// Mutation returns the TermRevisionMutation object of the builder.
func (tru *TermRevisionUpdate) Mutation() *TermRevisionMutation {
	return tru.mutation
}

// ClearPointers clears all "pointers" edges to the TermPointer entity.
func (tru *TermRevisionUpdate) ClearPointers() *TermRevisionUpdate {
	tru.mutation.ClearPointers()
	return tru
}

// RemovePointerIDs removes the "pointers" edge to TermPointer entities by IDs.
func (tru *TermRevisionUpdate) RemovePointerIDs(ids ...int) *TermRevisionUpdate {
	tru.mutation.RemovePointerIDs(ids...)
	return tru
}

// RemovePointers removes "pointers" edges to TermPointer entities.
func (tru *TermRevisionUpdate) RemovePointers(t ...*TermPointer) *TermRevisionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.RemovePointerIDs(ids...)
}

// ClearTerm clears the "term" edge to the Term entity.
func (tru *TermRevisionUpdate) ClearTerm() *TermRevisionUpdate {
	tru.mutation.ClearTerm()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TermRevisionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tru.defaults()
	if len(tru.hooks) == 0 {
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			if tru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TermRevisionUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TermRevisionUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TermRevisionUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TermRevisionUpdate) defaults() {
	if _, ok := tru.mutation.UpdatedAt(); !ok {
		v := termrevision.UpdateDefaultUpdatedAt()
		tru.mutation.SetUpdatedAt(v)
	}
}

func (tru *TermRevisionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termrevision.Table,
			Columns: termrevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termrevision.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: termrevision.FieldDescription,
		})
	}
	if tru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: termrevision.FieldDescription,
		})
	}
	if value, ok := tru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: termrevision.FieldUpdatedAt,
		})
	}
	if tru.mutation.PointersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termrevision.PointersTable,
			Columns: []string{termrevision.PointersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termpointer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedPointersIDs(); len(nodes) > 0 && !tru.mutation.PointersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termrevision.PointersTable,
			Columns: []string{termrevision.PointersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termpointer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.PointersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termrevision.PointersTable,
			Columns: []string{termrevision.PointersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termpointer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrevision.TermTable,
			Columns: []string{termrevision.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrevision.TermTable,
			Columns: []string{termrevision.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termrevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TermRevisionUpdateOne is the builder for updating a single TermRevision entity.
type TermRevisionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TermRevisionMutation
}

// SetDescription sets the "description" field.
func (truo *TermRevisionUpdateOne) SetDescription(s string) *TermRevisionUpdateOne {
	truo.mutation.SetDescription(s)
	return truo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (truo *TermRevisionUpdateOne) SetNillableDescription(s *string) *TermRevisionUpdateOne {
	if s != nil {
		truo.SetDescription(*s)
	}
	return truo
}

// ClearDescription clears the value of the "description" field.
func (truo *TermRevisionUpdateOne) ClearDescription() *TermRevisionUpdateOne {
	truo.mutation.ClearDescription()
	return truo
}

// SetTermID sets the "term_id" field.
func (truo *TermRevisionUpdateOne) SetTermID(i int) *TermRevisionUpdateOne {
	truo.mutation.SetTermID(i)
	return truo
}

// SetNillableTermID sets the "term_id" field if the given value is not nil.
func (truo *TermRevisionUpdateOne) SetNillableTermID(i *int) *TermRevisionUpdateOne {
	if i != nil {
		truo.SetTermID(*i)
	}
	return truo
}

// ClearTermID clears the value of the "term_id" field.
func (truo *TermRevisionUpdateOne) ClearTermID() *TermRevisionUpdateOne {
	truo.mutation.ClearTermID()
	return truo
}

// SetUpdatedAt sets the "updated_at" field.
func (truo *TermRevisionUpdateOne) SetUpdatedAt(t time.Time) *TermRevisionUpdateOne {
	truo.mutation.SetUpdatedAt(t)
	return truo
}

// AddPointerIDs adds the "pointers" edge to the TermPointer entity by IDs.
func (truo *TermRevisionUpdateOne) AddPointerIDs(ids ...int) *TermRevisionUpdateOne {
	truo.mutation.AddPointerIDs(ids...)
	return truo
}

// AddPointers adds the "pointers" edges to the TermPointer entity.
func (truo *TermRevisionUpdateOne) AddPointers(t ...*TermPointer) *TermRevisionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.AddPointerIDs(ids...)
}

// SetTerm sets the "term" edge to the Term entity.
func (truo *TermRevisionUpdateOne) SetTerm(t *Term) *TermRevisionUpdateOne {
	return truo.SetTermID(t.ID)
}

// Mutation returns the TermRevisionMutation object of the builder.
func (truo *TermRevisionUpdateOne) Mutation() *TermRevisionMutation {
	return truo.mutation
}

// ClearPointers clears all "pointers" edges to the TermPointer entity.
func (truo *TermRevisionUpdateOne) ClearPointers() *TermRevisionUpdateOne {
	truo.mutation.ClearPointers()
	return truo
}

// RemovePointerIDs removes the "pointers" edge to TermPointer entities by IDs.
func (truo *TermRevisionUpdateOne) RemovePointerIDs(ids ...int) *TermRevisionUpdateOne {
	truo.mutation.RemovePointerIDs(ids...)
	return truo
}

// RemovePointers removes "pointers" edges to TermPointer entities.
func (truo *TermRevisionUpdateOne) RemovePointers(t ...*TermPointer) *TermRevisionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.RemovePointerIDs(ids...)
}

// ClearTerm clears the "term" edge to the Term entity.
func (truo *TermRevisionUpdateOne) ClearTerm() *TermRevisionUpdateOne {
	truo.mutation.ClearTerm()
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TermRevisionUpdateOne) Select(field string, fields ...string) *TermRevisionUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TermRevision entity.
func (truo *TermRevisionUpdateOne) Save(ctx context.Context) (*TermRevision, error) {
	var (
		err  error
		node *TermRevision
	)
	truo.defaults()
	if len(truo.hooks) == 0 {
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			if truo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = truo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, truo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TermRevision)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TermRevisionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TermRevisionUpdateOne) SaveX(ctx context.Context) *TermRevision {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TermRevisionUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TermRevisionUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TermRevisionUpdateOne) defaults() {
	if _, ok := truo.mutation.UpdatedAt(); !ok {
		v := termrevision.UpdateDefaultUpdatedAt()
		truo.mutation.SetUpdatedAt(v)
	}
}

func (truo *TermRevisionUpdateOne) sqlSave(ctx context.Context) (_node *TermRevision, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termrevision.Table,
			Columns: termrevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termrevision.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TermRevision.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, termrevision.FieldID)
		for _, f := range fields {
			if !termrevision.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != termrevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: termrevision.FieldDescription,
		})
	}
	if truo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: termrevision.FieldDescription,
		})
	}
	if value, ok := truo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: termrevision.FieldUpdatedAt,
		})
	}
	if truo.mutation.PointersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termrevision.PointersTable,
			Columns: []string{termrevision.PointersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termpointer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedPointersIDs(); len(nodes) > 0 && !truo.mutation.PointersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termrevision.PointersTable,
			Columns: []string{termrevision.PointersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termpointer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.PointersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   termrevision.PointersTable,
			Columns: []string{termrevision.PointersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termpointer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrevision.TermTable,
			Columns: []string{termrevision.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrevision.TermTable,
			Columns: []string{termrevision.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TermRevision{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termrevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
