// Code generated by ent, DO NOT EDIT.

package ent

import (
	"devwiki/ent/termpointer"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// TermPointer is the model entity for the TermPointer schema.
type TermPointer struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TermPointer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case termpointer.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TermPointer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TermPointer fields.
func (tp *TermPointer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case termpointer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tp.ID = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this TermPointer.
// Note that you need to call TermPointer.Unwrap() before calling this method if this TermPointer
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TermPointer) Update() *TermPointerUpdateOne {
	return (&TermPointerClient{config: tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the TermPointer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TermPointer) Unwrap() *TermPointer {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: TermPointer is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TermPointer) String() string {
	var builder strings.Builder
	builder.WriteString("TermPointer(")
	builder.WriteString(fmt.Sprintf("id=%v", tp.ID))
	builder.WriteByte(')')
	return builder.String()
}

// TermPointers is a parsable slice of TermPointer.
type TermPointers []*TermPointer

func (tp TermPointers) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
