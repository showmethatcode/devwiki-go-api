// Code generated by ent, DO NOT EDIT.

package ent

import (
	"devwiki/ent/term"
	"devwiki/ent/termrevision"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TermRevision is the model entity for the TermRevision schema.
type TermRevision struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// TermID holds the value of the "term_id" field.
	TermID int `json:"term_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TermRevisionQuery when eager-loading is set.
	Edges TermRevisionEdges `json:"edges"`
}

// TermRevisionEdges holds the relations/edges for other nodes in the graph.
type TermRevisionEdges struct {
	// Term holds the value of the term edge.
	Term *Term `json:"term,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TermOrErr returns the Term value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TermRevisionEdges) TermOrErr() (*Term, error) {
	if e.loadedTypes[0] {
		if e.Term == nil {
			// The edge term was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: term.Label}
		}
		return e.Term, nil
	}
	return nil, &NotLoadedError{edge: "term"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TermRevision) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case termrevision.FieldID, termrevision.FieldTermID:
			values[i] = new(sql.NullInt64)
		case termrevision.FieldDescription:
			values[i] = new(sql.NullString)
		case termrevision.FieldCreatedAt, termrevision.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TermRevision", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TermRevision fields.
func (tr *TermRevision) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case termrevision.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case termrevision.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tr.Description = value.String
			}
		case termrevision.FieldTermID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field term_id", values[i])
			} else if value.Valid {
				tr.TermID = int(value.Int64)
			}
		case termrevision.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case termrevision.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tr.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTerm queries the "term" edge of the TermRevision entity.
func (tr *TermRevision) QueryTerm() *TermQuery {
	return (&TermRevisionClient{config: tr.config}).QueryTerm(tr)
}

// Update returns a builder for updating this TermRevision.
// Note that you need to call TermRevision.Unwrap() before calling this method if this TermRevision
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TermRevision) Update() *TermRevisionUpdateOne {
	return (&TermRevisionClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TermRevision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TermRevision) Unwrap() *TermRevision {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TermRevision is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TermRevision) String() string {
	var builder strings.Builder
	builder.WriteString("TermRevision(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("description=")
	builder.WriteString(tr.Description)
	builder.WriteString(", ")
	builder.WriteString("term_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TermID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TermRevisions is a parsable slice of TermRevision.
type TermRevisions []*TermRevision

func (tr TermRevisions) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
