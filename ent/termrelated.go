// Code generated by ent, DO NOT EDIT.

package ent

import (
	"devwiki/ent/term"
	"devwiki/ent/termrelated"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// TermRelated is the model entity for the TermRelated schema.
type TermRelated struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TermRelatedQuery when eager-loading is set.
	Edges           TermRelatedEdges `json:"edges"`
	term_subject_id *int
	term_related_id *int
}

// TermRelatedEdges holds the relations/edges for other nodes in the graph.
type TermRelatedEdges struct {
	// Subject holds the value of the subject edge.
	Subject *Term `json:"subject,omitempty"`
	// Related holds the value of the related edge.
	Related *Term `json:"related,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TermRelatedEdges) SubjectOrErr() (*Term, error) {
	if e.loadedTypes[0] {
		if e.Subject == nil {
			// The edge subject was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: term.Label}
		}
		return e.Subject, nil
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// RelatedOrErr returns the Related value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TermRelatedEdges) RelatedOrErr() (*Term, error) {
	if e.loadedTypes[1] {
		if e.Related == nil {
			// The edge related was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: term.Label}
		}
		return e.Related, nil
	}
	return nil, &NotLoadedError{edge: "related"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TermRelated) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case termrelated.FieldID:
			values[i] = new(sql.NullInt64)
		case termrelated.ForeignKeys[0]: // term_subject_id
			values[i] = new(sql.NullInt64)
		case termrelated.ForeignKeys[1]: // term_related_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TermRelated", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TermRelated fields.
func (tr *TermRelated) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case termrelated.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case termrelated.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field term_subject_id", value)
			} else if value.Valid {
				tr.term_subject_id = new(int)
				*tr.term_subject_id = int(value.Int64)
			}
		case termrelated.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field term_related_id", value)
			} else if value.Valid {
				tr.term_related_id = new(int)
				*tr.term_related_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySubject queries the "subject" edge of the TermRelated entity.
func (tr *TermRelated) QuerySubject() *TermQuery {
	return (&TermRelatedClient{config: tr.config}).QuerySubject(tr)
}

// QueryRelated queries the "related" edge of the TermRelated entity.
func (tr *TermRelated) QueryRelated() *TermQuery {
	return (&TermRelatedClient{config: tr.config}).QueryRelated(tr)
}

// Update returns a builder for updating this TermRelated.
// Note that you need to call TermRelated.Unwrap() before calling this method if this TermRelated
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TermRelated) Update() *TermRelatedUpdateOne {
	return (&TermRelatedClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TermRelated entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TermRelated) Unwrap() *TermRelated {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TermRelated is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TermRelated) String() string {
	var builder strings.Builder
	builder.WriteString("TermRelated(")
	builder.WriteString(fmt.Sprintf("id=%v", tr.ID))
	builder.WriteByte(')')
	return builder.String()
}

// TermRelateds is a parsable slice of TermRelated.
type TermRelateds []*TermRelated

func (tr TermRelateds) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
