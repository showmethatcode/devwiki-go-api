// Code generated by ent, DO NOT EDIT.

package termrelated

const (
	// Label holds the string label denoting the termrelated type in the database.
	Label = "term_related"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeRelated holds the string denoting the related edge name in mutations.
	EdgeRelated = "related"
	// Table holds the table name of the termrelated in the database.
	Table = "term_relateds"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "term_relateds"
	// SubjectInverseTable is the table name for the Term entity.
	// It exists in this package in order to avoid circular dependency with the "term" package.
	SubjectInverseTable = "terms"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "term_subject_id"
	// RelatedTable is the table that holds the related relation/edge.
	RelatedTable = "term_relateds"
	// RelatedInverseTable is the table name for the Term entity.
	// It exists in this package in order to avoid circular dependency with the "term" package.
	RelatedInverseTable = "terms"
	// RelatedColumn is the table column denoting the related relation/edge.
	RelatedColumn = "term_related_id"
)

// Columns holds all SQL columns for termrelated fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "term_relateds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"term_subject_id",
	"term_related_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
