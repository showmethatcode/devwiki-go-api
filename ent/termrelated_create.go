// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"devwiki/ent/term"
	"devwiki/ent/termrelated"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TermRelatedCreate is the builder for creating a TermRelated entity.
type TermRelatedCreate struct {
	config
	mutation *TermRelatedMutation
	hooks    []Hook
}

// SetSubjectID sets the "subject" edge to the Term entity by ID.
func (trc *TermRelatedCreate) SetSubjectID(id int) *TermRelatedCreate {
	trc.mutation.SetSubjectID(id)
	return trc
}

// SetNillableSubjectID sets the "subject" edge to the Term entity by ID if the given value is not nil.
func (trc *TermRelatedCreate) SetNillableSubjectID(id *int) *TermRelatedCreate {
	if id != nil {
		trc = trc.SetSubjectID(*id)
	}
	return trc
}

// SetSubject sets the "subject" edge to the Term entity.
func (trc *TermRelatedCreate) SetSubject(t *Term) *TermRelatedCreate {
	return trc.SetSubjectID(t.ID)
}

// SetRelatedID sets the "related" edge to the Term entity by ID.
func (trc *TermRelatedCreate) SetRelatedID(id int) *TermRelatedCreate {
	trc.mutation.SetRelatedID(id)
	return trc
}

// SetNillableRelatedID sets the "related" edge to the Term entity by ID if the given value is not nil.
func (trc *TermRelatedCreate) SetNillableRelatedID(id *int) *TermRelatedCreate {
	if id != nil {
		trc = trc.SetRelatedID(*id)
	}
	return trc
}

// SetRelated sets the "related" edge to the Term entity.
func (trc *TermRelatedCreate) SetRelated(t *Term) *TermRelatedCreate {
	return trc.SetRelatedID(t.ID)
}

// Mutation returns the TermRelatedMutation object of the builder.
func (trc *TermRelatedCreate) Mutation() *TermRelatedMutation {
	return trc.mutation
}

// Save creates the TermRelated in the database.
func (trc *TermRelatedCreate) Save(ctx context.Context) (*TermRelated, error) {
	var (
		err  error
		node *TermRelated
	)
	if len(trc.hooks) == 0 {
		if err = trc.check(); err != nil {
			return nil, err
		}
		node, err = trc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermRelatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = trc.check(); err != nil {
				return nil, err
			}
			trc.mutation = mutation
			if node, err = trc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(trc.hooks) - 1; i >= 0; i-- {
			if trc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = trc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, trc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TermRelated)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TermRelatedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TermRelatedCreate) SaveX(ctx context.Context) *TermRelated {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TermRelatedCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TermRelatedCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TermRelatedCreate) check() error {
	return nil
}

func (trc *TermRelatedCreate) sqlSave(ctx context.Context) (*TermRelated, error) {
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (trc *TermRelatedCreate) createSpec() (*TermRelated, *sqlgraph.CreateSpec) {
	var (
		_node = &TermRelated{config: trc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: termrelated.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termrelated.FieldID,
			},
		}
	)
	if nodes := trc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.SubjectTable,
			Columns: []string{termrelated.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.term_subject_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.RelatedTable,
			Columns: []string{termrelated.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.term_related_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TermRelatedCreateBulk is the builder for creating many TermRelated entities in bulk.
type TermRelatedCreateBulk struct {
	config
	builders []*TermRelatedCreate
}

// Save creates the TermRelated entities in the database.
func (trcb *TermRelatedCreateBulk) Save(ctx context.Context) ([]*TermRelated, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TermRelated, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TermRelatedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TermRelatedCreateBulk) SaveX(ctx context.Context) []*TermRelated {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TermRelatedCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TermRelatedCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}
