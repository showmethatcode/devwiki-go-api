// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"devwiki/ent/migrate"

	"devwiki/ent/term"
	"devwiki/ent/termpointer"
	"devwiki/ent/termrevision"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Term is the client for interacting with the Term builders.
	Term *TermClient
	// TermPointer is the client for interacting with the TermPointer builders.
	TermPointer *TermPointerClient
	// TermRevision is the client for interacting with the TermRevision builders.
	TermRevision *TermRevisionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Term = NewTermClient(c.config)
	c.TermPointer = NewTermPointerClient(c.config)
	c.TermRevision = NewTermRevisionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Term:         NewTermClient(cfg),
		TermPointer:  NewTermPointerClient(cfg),
		TermRevision: NewTermRevisionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Term:         NewTermClient(cfg),
		TermPointer:  NewTermPointerClient(cfg),
		TermRevision: NewTermRevisionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Term.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Term.Use(hooks...)
	c.TermPointer.Use(hooks...)
	c.TermRevision.Use(hooks...)
}

// TermClient is a client for the Term schema.
type TermClient struct {
	config
}

// NewTermClient returns a client for the Term from the given config.
func NewTermClient(c config) *TermClient {
	return &TermClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `term.Hooks(f(g(h())))`.
func (c *TermClient) Use(hooks ...Hook) {
	c.hooks.Term = append(c.hooks.Term, hooks...)
}

// Create returns a builder for creating a Term entity.
func (c *TermClient) Create() *TermCreate {
	mutation := newTermMutation(c.config, OpCreate)
	return &TermCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Term entities.
func (c *TermClient) CreateBulk(builders ...*TermCreate) *TermCreateBulk {
	return &TermCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Term.
func (c *TermClient) Update() *TermUpdate {
	mutation := newTermMutation(c.config, OpUpdate)
	return &TermUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TermClient) UpdateOne(t *Term) *TermUpdateOne {
	mutation := newTermMutation(c.config, OpUpdateOne, withTerm(t))
	return &TermUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TermClient) UpdateOneID(id int) *TermUpdateOne {
	mutation := newTermMutation(c.config, OpUpdateOne, withTermID(id))
	return &TermUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Term.
func (c *TermClient) Delete() *TermDelete {
	mutation := newTermMutation(c.config, OpDelete)
	return &TermDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TermClient) DeleteOne(t *Term) *TermDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TermClient) DeleteOneID(id int) *TermDeleteOne {
	builder := c.Delete().Where(term.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TermDeleteOne{builder}
}

// Query returns a query builder for Term.
func (c *TermClient) Query() *TermQuery {
	return &TermQuery{
		config: c.config,
	}
}

// Get returns a Term entity by its id.
func (c *TermClient) Get(ctx context.Context, id int) (*Term, error) {
	return c.Query().Where(term.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TermClient) GetX(ctx context.Context, id int) *Term {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRevisions queries the revisions edge of a Term.
func (c *TermClient) QueryRevisions(t *Term) *TermRevisionQuery {
	query := &TermRevisionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(term.Table, term.FieldID, id),
			sqlgraph.To(termrevision.Table, termrevision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, term.RevisionsTable, term.RevisionsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TermClient) Hooks() []Hook {
	return c.hooks.Term
}

// TermPointerClient is a client for the TermPointer schema.
type TermPointerClient struct {
	config
}

// NewTermPointerClient returns a client for the TermPointer from the given config.
func NewTermPointerClient(c config) *TermPointerClient {
	return &TermPointerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `termpointer.Hooks(f(g(h())))`.
func (c *TermPointerClient) Use(hooks ...Hook) {
	c.hooks.TermPointer = append(c.hooks.TermPointer, hooks...)
}

// Create returns a builder for creating a TermPointer entity.
func (c *TermPointerClient) Create() *TermPointerCreate {
	mutation := newTermPointerMutation(c.config, OpCreate)
	return &TermPointerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TermPointer entities.
func (c *TermPointerClient) CreateBulk(builders ...*TermPointerCreate) *TermPointerCreateBulk {
	return &TermPointerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TermPointer.
func (c *TermPointerClient) Update() *TermPointerUpdate {
	mutation := newTermPointerMutation(c.config, OpUpdate)
	return &TermPointerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TermPointerClient) UpdateOne(tp *TermPointer) *TermPointerUpdateOne {
	mutation := newTermPointerMutation(c.config, OpUpdateOne, withTermPointer(tp))
	return &TermPointerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TermPointerClient) UpdateOneID(id int) *TermPointerUpdateOne {
	mutation := newTermPointerMutation(c.config, OpUpdateOne, withTermPointerID(id))
	return &TermPointerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TermPointer.
func (c *TermPointerClient) Delete() *TermPointerDelete {
	mutation := newTermPointerMutation(c.config, OpDelete)
	return &TermPointerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TermPointerClient) DeleteOne(tp *TermPointer) *TermPointerDeleteOne {
	return c.DeleteOneID(tp.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TermPointerClient) DeleteOneID(id int) *TermPointerDeleteOne {
	builder := c.Delete().Where(termpointer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TermPointerDeleteOne{builder}
}

// Query returns a query builder for TermPointer.
func (c *TermPointerClient) Query() *TermPointerQuery {
	return &TermPointerQuery{
		config: c.config,
	}
}

// Get returns a TermPointer entity by its id.
func (c *TermPointerClient) Get(ctx context.Context, id int) (*TermPointer, error) {
	return c.Query().Where(termpointer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TermPointerClient) GetX(ctx context.Context, id int) *TermPointer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TermPointerClient) Hooks() []Hook {
	return c.hooks.TermPointer
}

// TermRevisionClient is a client for the TermRevision schema.
type TermRevisionClient struct {
	config
}

// NewTermRevisionClient returns a client for the TermRevision from the given config.
func NewTermRevisionClient(c config) *TermRevisionClient {
	return &TermRevisionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `termrevision.Hooks(f(g(h())))`.
func (c *TermRevisionClient) Use(hooks ...Hook) {
	c.hooks.TermRevision = append(c.hooks.TermRevision, hooks...)
}

// Create returns a builder for creating a TermRevision entity.
func (c *TermRevisionClient) Create() *TermRevisionCreate {
	mutation := newTermRevisionMutation(c.config, OpCreate)
	return &TermRevisionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TermRevision entities.
func (c *TermRevisionClient) CreateBulk(builders ...*TermRevisionCreate) *TermRevisionCreateBulk {
	return &TermRevisionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TermRevision.
func (c *TermRevisionClient) Update() *TermRevisionUpdate {
	mutation := newTermRevisionMutation(c.config, OpUpdate)
	return &TermRevisionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TermRevisionClient) UpdateOne(tr *TermRevision) *TermRevisionUpdateOne {
	mutation := newTermRevisionMutation(c.config, OpUpdateOne, withTermRevision(tr))
	return &TermRevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TermRevisionClient) UpdateOneID(id int) *TermRevisionUpdateOne {
	mutation := newTermRevisionMutation(c.config, OpUpdateOne, withTermRevisionID(id))
	return &TermRevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TermRevision.
func (c *TermRevisionClient) Delete() *TermRevisionDelete {
	mutation := newTermRevisionMutation(c.config, OpDelete)
	return &TermRevisionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TermRevisionClient) DeleteOne(tr *TermRevision) *TermRevisionDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TermRevisionClient) DeleteOneID(id int) *TermRevisionDeleteOne {
	builder := c.Delete().Where(termrevision.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TermRevisionDeleteOne{builder}
}

// Query returns a query builder for TermRevision.
func (c *TermRevisionClient) Query() *TermRevisionQuery {
	return &TermRevisionQuery{
		config: c.config,
	}
}

// Get returns a TermRevision entity by its id.
func (c *TermRevisionClient) Get(ctx context.Context, id int) (*TermRevision, error) {
	return c.Query().Where(termrevision.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TermRevisionClient) GetX(ctx context.Context, id int) *TermRevision {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTerm queries the term edge of a TermRevision.
func (c *TermRevisionClient) QueryTerm(tr *TermRevision) *TermQuery {
	query := &TermQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(termrevision.Table, termrevision.FieldID, id),
			sqlgraph.To(term.Table, term.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, termrevision.TermTable, termrevision.TermColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TermRevisionClient) Hooks() []Hook {
	return c.hooks.TermRevision
}
