// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"devwiki/ent/predicate"
	"devwiki/ent/term"
	"devwiki/ent/termrevision"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTerm         = "Term"
	TypeTermPointer  = "TermPointer"
	TypeTermRevision = "TermRevision"
)

// TermMutation represents an operation that mutates the Term nodes in the graph.
type TermMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	revisions        map[int]struct{}
	removedrevisions map[int]struct{}
	clearedrevisions bool
	done             bool
	oldValue         func(context.Context) (*Term, error)
	predicates       []predicate.Term
}

var _ ent.Mutation = (*TermMutation)(nil)

// termOption allows management of the mutation configuration using functional options.
type termOption func(*TermMutation)

// newTermMutation creates new mutation for the Term entity.
func newTermMutation(c config, op Op, opts ...termOption) *TermMutation {
	m := &TermMutation{
		config:        c,
		op:            op,
		typ:           TypeTerm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTermID sets the ID field of the mutation.
func withTermID(id int) termOption {
	return func(m *TermMutation) {
		var (
			err   error
			once  sync.Once
			value *Term
		)
		m.oldValue = func(ctx context.Context) (*Term, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Term.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTerm sets the old Term of the mutation.
func withTerm(node *Term) termOption {
	return func(m *TermMutation) {
		m.oldValue = func(context.Context) (*Term, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TermMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TermMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TermMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TermMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Term.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TermMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TermMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Term entity.
// If the Term object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TermMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TermMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TermMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Term entity.
// If the Term object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TermMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TermMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TermMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Term entity.
// If the Term object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TermMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddRevisionIDs adds the "revisions" edge to the TermRevision entity by ids.
func (m *TermMutation) AddRevisionIDs(ids ...int) {
	if m.revisions == nil {
		m.revisions = make(map[int]struct{})
	}
	for i := range ids {
		m.revisions[ids[i]] = struct{}{}
	}
}

// ClearRevisions clears the "revisions" edge to the TermRevision entity.
func (m *TermMutation) ClearRevisions() {
	m.clearedrevisions = true
}

// RevisionsCleared reports if the "revisions" edge to the TermRevision entity was cleared.
func (m *TermMutation) RevisionsCleared() bool {
	return m.clearedrevisions
}

// RemoveRevisionIDs removes the "revisions" edge to the TermRevision entity by IDs.
func (m *TermMutation) RemoveRevisionIDs(ids ...int) {
	if m.removedrevisions == nil {
		m.removedrevisions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.revisions, ids[i])
		m.removedrevisions[ids[i]] = struct{}{}
	}
}

// RemovedRevisions returns the removed IDs of the "revisions" edge to the TermRevision entity.
func (m *TermMutation) RemovedRevisionsIDs() (ids []int) {
	for id := range m.removedrevisions {
		ids = append(ids, id)
	}
	return
}

// RevisionsIDs returns the "revisions" edge IDs in the mutation.
func (m *TermMutation) RevisionsIDs() (ids []int) {
	for id := range m.revisions {
		ids = append(ids, id)
	}
	return
}

// ResetRevisions resets all changes to the "revisions" edge.
func (m *TermMutation) ResetRevisions() {
	m.revisions = nil
	m.clearedrevisions = false
	m.removedrevisions = nil
}

// Where appends a list predicates to the TermMutation builder.
func (m *TermMutation) Where(ps ...predicate.Term) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TermMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Term).
func (m *TermMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TermMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, term.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, term.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, term.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TermMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case term.FieldName:
		return m.Name()
	case term.FieldCreatedAt:
		return m.CreatedAt()
	case term.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TermMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case term.FieldName:
		return m.OldName(ctx)
	case term.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case term.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Term field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermMutation) SetField(name string, value ent.Value) error {
	switch name {
	case term.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case term.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case term.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Term field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TermMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TermMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Term numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TermMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TermMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TermMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Term nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TermMutation) ResetField(name string) error {
	switch name {
	case term.FieldName:
		m.ResetName()
		return nil
	case term.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case term.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Term field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TermMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.revisions != nil {
		edges = append(edges, term.EdgeRevisions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TermMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case term.EdgeRevisions:
		ids := make([]ent.Value, 0, len(m.revisions))
		for id := range m.revisions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TermMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrevisions != nil {
		edges = append(edges, term.EdgeRevisions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TermMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case term.EdgeRevisions:
		ids := make([]ent.Value, 0, len(m.removedrevisions))
		for id := range m.removedrevisions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TermMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrevisions {
		edges = append(edges, term.EdgeRevisions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TermMutation) EdgeCleared(name string) bool {
	switch name {
	case term.EdgeRevisions:
		return m.clearedrevisions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TermMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Term unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TermMutation) ResetEdge(name string) error {
	switch name {
	case term.EdgeRevisions:
		m.ResetRevisions()
		return nil
	}
	return fmt.Errorf("unknown Term edge %s", name)
}

// TermPointerMutation represents an operation that mutates the TermPointer nodes in the graph.
type TermPointerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TermPointer, error)
	predicates    []predicate.TermPointer
}

var _ ent.Mutation = (*TermPointerMutation)(nil)

// termpointerOption allows management of the mutation configuration using functional options.
type termpointerOption func(*TermPointerMutation)

// newTermPointerMutation creates new mutation for the TermPointer entity.
func newTermPointerMutation(c config, op Op, opts ...termpointerOption) *TermPointerMutation {
	m := &TermPointerMutation{
		config:        c,
		op:            op,
		typ:           TypeTermPointer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTermPointerID sets the ID field of the mutation.
func withTermPointerID(id int) termpointerOption {
	return func(m *TermPointerMutation) {
		var (
			err   error
			once  sync.Once
			value *TermPointer
		)
		m.oldValue = func(ctx context.Context) (*TermPointer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TermPointer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTermPointer sets the old TermPointer of the mutation.
func withTermPointer(node *TermPointer) termpointerOption {
	return func(m *TermPointerMutation) {
		m.oldValue = func(context.Context) (*TermPointer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TermPointerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TermPointerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TermPointerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TermPointerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TermPointer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the TermPointerMutation builder.
func (m *TermPointerMutation) Where(ps ...predicate.TermPointer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TermPointerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TermPointer).
func (m *TermPointerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TermPointerMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TermPointerMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TermPointerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown TermPointer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermPointerMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TermPointer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TermPointerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TermPointerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermPointerMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown TermPointer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TermPointerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TermPointerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TermPointerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TermPointer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TermPointerMutation) ResetField(name string) error {
	return fmt.Errorf("unknown TermPointer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TermPointerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TermPointerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TermPointerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TermPointerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TermPointerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TermPointerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TermPointerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TermPointer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TermPointerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TermPointer edge %s", name)
}

// TermRevisionMutation represents an operation that mutates the TermRevision nodes in the graph.
type TermRevisionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	description   *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	term          *int
	clearedterm   bool
	done          bool
	oldValue      func(context.Context) (*TermRevision, error)
	predicates    []predicate.TermRevision
}

var _ ent.Mutation = (*TermRevisionMutation)(nil)

// termrevisionOption allows management of the mutation configuration using functional options.
type termrevisionOption func(*TermRevisionMutation)

// newTermRevisionMutation creates new mutation for the TermRevision entity.
func newTermRevisionMutation(c config, op Op, opts ...termrevisionOption) *TermRevisionMutation {
	m := &TermRevisionMutation{
		config:        c,
		op:            op,
		typ:           TypeTermRevision,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTermRevisionID sets the ID field of the mutation.
func withTermRevisionID(id int) termrevisionOption {
	return func(m *TermRevisionMutation) {
		var (
			err   error
			once  sync.Once
			value *TermRevision
		)
		m.oldValue = func(ctx context.Context) (*TermRevision, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TermRevision.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTermRevision sets the old TermRevision of the mutation.
func withTermRevision(node *TermRevision) termrevisionOption {
	return func(m *TermRevisionMutation) {
		m.oldValue = func(context.Context) (*TermRevision, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TermRevisionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TermRevisionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TermRevisionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TermRevisionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TermRevision.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *TermRevisionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TermRevisionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TermRevision entity.
// If the TermRevision object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermRevisionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TermRevisionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[termrevision.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TermRevisionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[termrevision.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TermRevisionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, termrevision.FieldDescription)
}

// SetTermID sets the "term_id" field.
func (m *TermRevisionMutation) SetTermID(i int) {
	m.term = &i
}

// TermID returns the value of the "term_id" field in the mutation.
func (m *TermRevisionMutation) TermID() (r int, exists bool) {
	v := m.term
	if v == nil {
		return
	}
	return *v, true
}

// OldTermID returns the old "term_id" field's value of the TermRevision entity.
// If the TermRevision object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermRevisionMutation) OldTermID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTermID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTermID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTermID: %w", err)
	}
	return oldValue.TermID, nil
}

// ClearTermID clears the value of the "term_id" field.
func (m *TermRevisionMutation) ClearTermID() {
	m.term = nil
	m.clearedFields[termrevision.FieldTermID] = struct{}{}
}

// TermIDCleared returns if the "term_id" field was cleared in this mutation.
func (m *TermRevisionMutation) TermIDCleared() bool {
	_, ok := m.clearedFields[termrevision.FieldTermID]
	return ok
}

// ResetTermID resets all changes to the "term_id" field.
func (m *TermRevisionMutation) ResetTermID() {
	m.term = nil
	delete(m.clearedFields, termrevision.FieldTermID)
}

// SetCreatedAt sets the "created_at" field.
func (m *TermRevisionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TermRevisionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TermRevision entity.
// If the TermRevision object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermRevisionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TermRevisionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TermRevisionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TermRevisionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TermRevision entity.
// If the TermRevision object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TermRevisionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TermRevisionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearTerm clears the "term" edge to the Term entity.
func (m *TermRevisionMutation) ClearTerm() {
	m.clearedterm = true
}

// TermCleared reports if the "term" edge to the Term entity was cleared.
func (m *TermRevisionMutation) TermCleared() bool {
	return m.TermIDCleared() || m.clearedterm
}

// TermIDs returns the "term" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TermID instead. It exists only for internal usage by the builders.
func (m *TermRevisionMutation) TermIDs() (ids []int) {
	if id := m.term; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTerm resets all changes to the "term" edge.
func (m *TermRevisionMutation) ResetTerm() {
	m.term = nil
	m.clearedterm = false
}

// Where appends a list predicates to the TermRevisionMutation builder.
func (m *TermRevisionMutation) Where(ps ...predicate.TermRevision) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TermRevisionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TermRevision).
func (m *TermRevisionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TermRevisionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.description != nil {
		fields = append(fields, termrevision.FieldDescription)
	}
	if m.term != nil {
		fields = append(fields, termrevision.FieldTermID)
	}
	if m.created_at != nil {
		fields = append(fields, termrevision.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, termrevision.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TermRevisionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case termrevision.FieldDescription:
		return m.Description()
	case termrevision.FieldTermID:
		return m.TermID()
	case termrevision.FieldCreatedAt:
		return m.CreatedAt()
	case termrevision.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TermRevisionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case termrevision.FieldDescription:
		return m.OldDescription(ctx)
	case termrevision.FieldTermID:
		return m.OldTermID(ctx)
	case termrevision.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case termrevision.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TermRevision field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermRevisionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case termrevision.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case termrevision.FieldTermID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTermID(v)
		return nil
	case termrevision.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case termrevision.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TermRevision field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TermRevisionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TermRevisionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TermRevisionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TermRevision numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TermRevisionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(termrevision.FieldDescription) {
		fields = append(fields, termrevision.FieldDescription)
	}
	if m.FieldCleared(termrevision.FieldTermID) {
		fields = append(fields, termrevision.FieldTermID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TermRevisionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TermRevisionMutation) ClearField(name string) error {
	switch name {
	case termrevision.FieldDescription:
		m.ClearDescription()
		return nil
	case termrevision.FieldTermID:
		m.ClearTermID()
		return nil
	}
	return fmt.Errorf("unknown TermRevision nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TermRevisionMutation) ResetField(name string) error {
	switch name {
	case termrevision.FieldDescription:
		m.ResetDescription()
		return nil
	case termrevision.FieldTermID:
		m.ResetTermID()
		return nil
	case termrevision.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case termrevision.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TermRevision field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TermRevisionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.term != nil {
		edges = append(edges, termrevision.EdgeTerm)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TermRevisionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case termrevision.EdgeTerm:
		if id := m.term; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TermRevisionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TermRevisionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TermRevisionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedterm {
		edges = append(edges, termrevision.EdgeTerm)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TermRevisionMutation) EdgeCleared(name string) bool {
	switch name {
	case termrevision.EdgeTerm:
		return m.clearedterm
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TermRevisionMutation) ClearEdge(name string) error {
	switch name {
	case termrevision.EdgeTerm:
		m.ClearTerm()
		return nil
	}
	return fmt.Errorf("unknown TermRevision unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TermRevisionMutation) ResetEdge(name string) error {
	switch name {
	case termrevision.EdgeTerm:
		m.ResetTerm()
		return nil
	}
	return fmt.Errorf("unknown TermRevision edge %s", name)
}
