// Code generated by ent, DO NOT EDIT.

package termrevision

import (
	"time"
)

const (
	// Label holds the string label denoting the termrevision type in the database.
	Label = "term_revision"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTermID holds the string denoting the term_id field in the database.
	FieldTermID = "term_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePointers holds the string denoting the pointers edge name in mutations.
	EdgePointers = "pointers"
	// EdgeTerm holds the string denoting the term edge name in mutations.
	EdgeTerm = "term"
	// Table holds the table name of the termrevision in the database.
	Table = "term_revisions"
	// PointersTable is the table that holds the pointers relation/edge.
	PointersTable = "term_pointers"
	// PointersInverseTable is the table name for the TermPointer entity.
	// It exists in this package in order to avoid circular dependency with the "termpointer" package.
	PointersInverseTable = "term_pointers"
	// PointersColumn is the table column denoting the pointers relation/edge.
	PointersColumn = "revision_id"
	// TermTable is the table that holds the term relation/edge.
	TermTable = "term_revisions"
	// TermInverseTable is the table name for the Term entity.
	// It exists in this package in order to avoid circular dependency with the "term" package.
	TermInverseTable = "terms"
	// TermColumn is the table column denoting the term relation/edge.
	TermColumn = "term_id"
)

// Columns holds all SQL columns for termrevision fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldTermID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
