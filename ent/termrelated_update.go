// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"devwiki/ent/predicate"
	"devwiki/ent/term"
	"devwiki/ent/termrelated"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TermRelatedUpdate is the builder for updating TermRelated entities.
type TermRelatedUpdate struct {
	config
	hooks    []Hook
	mutation *TermRelatedMutation
}

// Where appends a list predicates to the TermRelatedUpdate builder.
func (tru *TermRelatedUpdate) Where(ps ...predicate.TermRelated) *TermRelatedUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetSubjectID sets the "subject" edge to the Term entity by ID.
func (tru *TermRelatedUpdate) SetSubjectID(id int) *TermRelatedUpdate {
	tru.mutation.SetSubjectID(id)
	return tru
}

// SetNillableSubjectID sets the "subject" edge to the Term entity by ID if the given value is not nil.
func (tru *TermRelatedUpdate) SetNillableSubjectID(id *int) *TermRelatedUpdate {
	if id != nil {
		tru = tru.SetSubjectID(*id)
	}
	return tru
}

// SetSubject sets the "subject" edge to the Term entity.
func (tru *TermRelatedUpdate) SetSubject(t *Term) *TermRelatedUpdate {
	return tru.SetSubjectID(t.ID)
}

// SetRelatedID sets the "related" edge to the Term entity by ID.
func (tru *TermRelatedUpdate) SetRelatedID(id int) *TermRelatedUpdate {
	tru.mutation.SetRelatedID(id)
	return tru
}

// SetNillableRelatedID sets the "related" edge to the Term entity by ID if the given value is not nil.
func (tru *TermRelatedUpdate) SetNillableRelatedID(id *int) *TermRelatedUpdate {
	if id != nil {
		tru = tru.SetRelatedID(*id)
	}
	return tru
}

// SetRelated sets the "related" edge to the Term entity.
func (tru *TermRelatedUpdate) SetRelated(t *Term) *TermRelatedUpdate {
	return tru.SetRelatedID(t.ID)
}

// Mutation returns the TermRelatedMutation object of the builder.
func (tru *TermRelatedUpdate) Mutation() *TermRelatedMutation {
	return tru.mutation
}

// ClearSubject clears the "subject" edge to the Term entity.
func (tru *TermRelatedUpdate) ClearSubject() *TermRelatedUpdate {
	tru.mutation.ClearSubject()
	return tru
}

// ClearRelated clears the "related" edge to the Term entity.
func (tru *TermRelatedUpdate) ClearRelated() *TermRelatedUpdate {
	tru.mutation.ClearRelated()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TermRelatedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tru.hooks) == 0 {
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermRelatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			if tru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TermRelatedUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TermRelatedUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TermRelatedUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tru *TermRelatedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termrelated.Table,
			Columns: termrelated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termrelated.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tru.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.SubjectTable,
			Columns: []string{termrelated.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.SubjectTable,
			Columns: []string{termrelated.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.RelatedTable,
			Columns: []string{termrelated.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.RelatedTable,
			Columns: []string{termrelated.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termrelated.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TermRelatedUpdateOne is the builder for updating a single TermRelated entity.
type TermRelatedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TermRelatedMutation
}

// SetSubjectID sets the "subject" edge to the Term entity by ID.
func (truo *TermRelatedUpdateOne) SetSubjectID(id int) *TermRelatedUpdateOne {
	truo.mutation.SetSubjectID(id)
	return truo
}

// SetNillableSubjectID sets the "subject" edge to the Term entity by ID if the given value is not nil.
func (truo *TermRelatedUpdateOne) SetNillableSubjectID(id *int) *TermRelatedUpdateOne {
	if id != nil {
		truo = truo.SetSubjectID(*id)
	}
	return truo
}

// SetSubject sets the "subject" edge to the Term entity.
func (truo *TermRelatedUpdateOne) SetSubject(t *Term) *TermRelatedUpdateOne {
	return truo.SetSubjectID(t.ID)
}

// SetRelatedID sets the "related" edge to the Term entity by ID.
func (truo *TermRelatedUpdateOne) SetRelatedID(id int) *TermRelatedUpdateOne {
	truo.mutation.SetRelatedID(id)
	return truo
}

// SetNillableRelatedID sets the "related" edge to the Term entity by ID if the given value is not nil.
func (truo *TermRelatedUpdateOne) SetNillableRelatedID(id *int) *TermRelatedUpdateOne {
	if id != nil {
		truo = truo.SetRelatedID(*id)
	}
	return truo
}

// SetRelated sets the "related" edge to the Term entity.
func (truo *TermRelatedUpdateOne) SetRelated(t *Term) *TermRelatedUpdateOne {
	return truo.SetRelatedID(t.ID)
}

// Mutation returns the TermRelatedMutation object of the builder.
func (truo *TermRelatedUpdateOne) Mutation() *TermRelatedMutation {
	return truo.mutation
}

// ClearSubject clears the "subject" edge to the Term entity.
func (truo *TermRelatedUpdateOne) ClearSubject() *TermRelatedUpdateOne {
	truo.mutation.ClearSubject()
	return truo
}

// ClearRelated clears the "related" edge to the Term entity.
func (truo *TermRelatedUpdateOne) ClearRelated() *TermRelatedUpdateOne {
	truo.mutation.ClearRelated()
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TermRelatedUpdateOne) Select(field string, fields ...string) *TermRelatedUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TermRelated entity.
func (truo *TermRelatedUpdateOne) Save(ctx context.Context) (*TermRelated, error) {
	var (
		err  error
		node *TermRelated
	)
	if len(truo.hooks) == 0 {
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermRelatedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			if truo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = truo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, truo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TermRelated)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TermRelatedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TermRelatedUpdateOne) SaveX(ctx context.Context) *TermRelated {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TermRelatedUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TermRelatedUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (truo *TermRelatedUpdateOne) sqlSave(ctx context.Context) (_node *TermRelated, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termrelated.Table,
			Columns: termrelated.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termrelated.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TermRelated.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, termrelated.FieldID)
		for _, f := range fields {
			if !termrelated.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != termrelated.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if truo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.SubjectTable,
			Columns: []string{termrelated.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.SubjectTable,
			Columns: []string{termrelated.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.RelatedTable,
			Columns: []string{termrelated.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termrelated.RelatedTable,
			Columns: []string{termrelated.RelatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TermRelated{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termrelated.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
