// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"devwiki/ent/predicate"
	"devwiki/ent/term"
	"devwiki/ent/termpointer"
	"devwiki/ent/termrevision"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TermPointerUpdate is the builder for updating TermPointer entities.
type TermPointerUpdate struct {
	config
	hooks    []Hook
	mutation *TermPointerMutation
}

// Where appends a list predicates to the TermPointerUpdate builder.
func (tpu *TermPointerUpdate) Where(ps ...predicate.TermPointer) *TermPointerUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetTermID sets the "term_id" field.
func (tpu *TermPointerUpdate) SetTermID(i int) *TermPointerUpdate {
	tpu.mutation.SetTermID(i)
	return tpu
}

// SetNillableTermID sets the "term_id" field if the given value is not nil.
func (tpu *TermPointerUpdate) SetNillableTermID(i *int) *TermPointerUpdate {
	if i != nil {
		tpu.SetTermID(*i)
	}
	return tpu
}

// ClearTermID clears the value of the "term_id" field.
func (tpu *TermPointerUpdate) ClearTermID() *TermPointerUpdate {
	tpu.mutation.ClearTermID()
	return tpu
}

// SetRevisionID sets the "revision_id" field.
func (tpu *TermPointerUpdate) SetRevisionID(i int) *TermPointerUpdate {
	tpu.mutation.SetRevisionID(i)
	return tpu
}

// SetNillableRevisionID sets the "revision_id" field if the given value is not nil.
func (tpu *TermPointerUpdate) SetNillableRevisionID(i *int) *TermPointerUpdate {
	if i != nil {
		tpu.SetRevisionID(*i)
	}
	return tpu
}

// ClearRevisionID clears the value of the "revision_id" field.
func (tpu *TermPointerUpdate) ClearRevisionID() *TermPointerUpdate {
	tpu.mutation.ClearRevisionID()
	return tpu
}

// SetTerm sets the "term" edge to the Term entity.
func (tpu *TermPointerUpdate) SetTerm(t *Term) *TermPointerUpdate {
	return tpu.SetTermID(t.ID)
}

// SetRevision sets the "revision" edge to the TermRevision entity.
func (tpu *TermPointerUpdate) SetRevision(t *TermRevision) *TermPointerUpdate {
	return tpu.SetRevisionID(t.ID)
}

// Mutation returns the TermPointerMutation object of the builder.
func (tpu *TermPointerUpdate) Mutation() *TermPointerMutation {
	return tpu.mutation
}

// ClearTerm clears the "term" edge to the Term entity.
func (tpu *TermPointerUpdate) ClearTerm() *TermPointerUpdate {
	tpu.mutation.ClearTerm()
	return tpu
}

// ClearRevision clears the "revision" edge to the TermRevision entity.
func (tpu *TermPointerUpdate) ClearRevision() *TermPointerUpdate {
	tpu.mutation.ClearRevision()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TermPointerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tpu.hooks) == 0 {
		affected, err = tpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermPointerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpu.mutation = mutation
			affected, err = tpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tpu.hooks) - 1; i >= 0; i-- {
			if tpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TermPointerUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TermPointerUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TermPointerUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpu *TermPointerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termpointer.Table,
			Columns: termpointer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termpointer.FieldID,
			},
		},
	}
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tpu.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.TermTable,
			Columns: []string{termpointer.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.TermTable,
			Columns: []string{termpointer.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.RevisionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.RevisionTable,
			Columns: []string{termpointer.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termrevision.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.RevisionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.RevisionTable,
			Columns: []string{termpointer.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termrevision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termpointer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TermPointerUpdateOne is the builder for updating a single TermPointer entity.
type TermPointerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TermPointerMutation
}

// SetTermID sets the "term_id" field.
func (tpuo *TermPointerUpdateOne) SetTermID(i int) *TermPointerUpdateOne {
	tpuo.mutation.SetTermID(i)
	return tpuo
}

// SetNillableTermID sets the "term_id" field if the given value is not nil.
func (tpuo *TermPointerUpdateOne) SetNillableTermID(i *int) *TermPointerUpdateOne {
	if i != nil {
		tpuo.SetTermID(*i)
	}
	return tpuo
}

// ClearTermID clears the value of the "term_id" field.
func (tpuo *TermPointerUpdateOne) ClearTermID() *TermPointerUpdateOne {
	tpuo.mutation.ClearTermID()
	return tpuo
}

// SetRevisionID sets the "revision_id" field.
func (tpuo *TermPointerUpdateOne) SetRevisionID(i int) *TermPointerUpdateOne {
	tpuo.mutation.SetRevisionID(i)
	return tpuo
}

// SetNillableRevisionID sets the "revision_id" field if the given value is not nil.
func (tpuo *TermPointerUpdateOne) SetNillableRevisionID(i *int) *TermPointerUpdateOne {
	if i != nil {
		tpuo.SetRevisionID(*i)
	}
	return tpuo
}

// ClearRevisionID clears the value of the "revision_id" field.
func (tpuo *TermPointerUpdateOne) ClearRevisionID() *TermPointerUpdateOne {
	tpuo.mutation.ClearRevisionID()
	return tpuo
}

// SetTerm sets the "term" edge to the Term entity.
func (tpuo *TermPointerUpdateOne) SetTerm(t *Term) *TermPointerUpdateOne {
	return tpuo.SetTermID(t.ID)
}

// SetRevision sets the "revision" edge to the TermRevision entity.
func (tpuo *TermPointerUpdateOne) SetRevision(t *TermRevision) *TermPointerUpdateOne {
	return tpuo.SetRevisionID(t.ID)
}

// Mutation returns the TermPointerMutation object of the builder.
func (tpuo *TermPointerUpdateOne) Mutation() *TermPointerMutation {
	return tpuo.mutation
}

// ClearTerm clears the "term" edge to the Term entity.
func (tpuo *TermPointerUpdateOne) ClearTerm() *TermPointerUpdateOne {
	tpuo.mutation.ClearTerm()
	return tpuo
}

// ClearRevision clears the "revision" edge to the TermRevision entity.
func (tpuo *TermPointerUpdateOne) ClearRevision() *TermPointerUpdateOne {
	tpuo.mutation.ClearRevision()
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TermPointerUpdateOne) Select(field string, fields ...string) *TermPointerUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TermPointer entity.
func (tpuo *TermPointerUpdateOne) Save(ctx context.Context) (*TermPointer, error) {
	var (
		err  error
		node *TermPointer
	)
	if len(tpuo.hooks) == 0 {
		node, err = tpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermPointerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tpuo.mutation = mutation
			node, err = tpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tpuo.hooks) - 1; i >= 0; i-- {
			if tpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TermPointer)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TermPointerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TermPointerUpdateOne) SaveX(ctx context.Context) *TermPointer {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TermPointerUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TermPointerUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpuo *TermPointerUpdateOne) sqlSave(ctx context.Context) (_node *TermPointer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   termpointer.Table,
			Columns: termpointer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: termpointer.FieldID,
			},
		},
	}
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TermPointer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, termpointer.FieldID)
		for _, f := range fields {
			if !termpointer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != termpointer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tpuo.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.TermTable,
			Columns: []string{termpointer.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.TermTable,
			Columns: []string{termpointer.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.RevisionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.RevisionTable,
			Columns: []string{termpointer.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termrevision.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.RevisionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   termpointer.RevisionTable,
			Columns: []string{termpointer.RevisionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: termrevision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TermPointer{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{termpointer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
